{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuestionServiceService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'https://localhost:7025/api/Question';\n  }\n  getAllQuestion() {\n    return this.http.get(this.url);\n  }\n  postQuestion(data) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(this.url, data, httpOptions);\n  }\n  getQuestion(Id) {\n    return this.http.get(`${this.url}+Id:int?Id=${Id}`);\n  }\n}\n_class = QuestionServiceService;\n_class.ɵfac = function QuestionServiceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","QuestionServiceService","constructor","http","url","getAllQuestion","get","postQuestion","data","httpOptions","headers","post","getQuestion","Id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\khanm\\OneDrive\\Desktop\\Angular_Project\\Quiz Project\\Quiz_Angular\\src\\app\\quiz\\ServeforQuiz\\question-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Question } from 'src/app/Models/Question.Model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuestionServiceService {\r\n\r\n  url:string = 'https://localhost:7025/api/Question'\r\n  constructor(private http:HttpClient) { }\r\n\r\n  getAllQuestion():Observable<Question[]>{\r\n    return this.http.get<Question[]>(this.url);\r\n  }\r\n  postQuestion(data:Question):Observable<Question>{\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\r\n    return this.http.post<Question>(this.url,data,httpOptions);\r\n  }\r\n  getQuestion(Id:number):Observable<any[]>{\r\n    return this.http.get<any[]>(`${this.url}+Id:int?Id=${Id}`);\r\n  }\r\n}\r\n"],"mappings":";AACA,SAAoBA,WAAW,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,GAAG,GAAU,qCAAqC;EACX;EAEvCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,GAAG,CAAC;EAC5C;EACAG,YAAYA,CAACC,IAAa;IACxB,MAAMC,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAIV,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;IACxF,OAAO,IAAI,CAACG,IAAI,CAACQ,IAAI,CAAW,IAAI,CAACP,GAAG,EAACI,IAAI,EAACC,WAAW,CAAC;EAC5D;EACAG,WAAWA,CAACC,EAAS;IACnB,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,GAAG,cAAcS,EAAE,EAAE,CAAC;EAC5D;;SAdWZ,sBAAsB;;mBAAtBA,MAAsB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAtBhB,MAAsB;EAAAiB,OAAA,EAAtBjB,MAAsB,CAAAkB,IAAA;EAAAC,UAAA,EAFrB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}